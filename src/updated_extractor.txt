import os
import cv2
import numpy as np
import pandas as pd
import logging
from skimage.feature import local_binary_pattern
import re

def extract_features(data_dir, output_csv, log_file, class_mapping=None):
    logging.basicConfig(filename=log_file, level=logging.INFO, format='%(asctime)s - %(message)s')

    features = []
    labels = []

    total_images = sum([
        len(os.listdir(os.path.join(data_dir, fruit_class)))
        for fruit_class in os.listdir(data_dir)
        if os.path.isdir(os.path.join(data_dir, fruit_class))
    ])
    processed_images = 0

    logging.info(f"Started feature extraction from {data_dir}. Total images to process: {total_images}")

    for fruit_class in os.listdir(data_dir):
        class_path = os.path.join(data_dir, fruit_class)
        if not os.path.isdir(class_path):
            continue

        # Apply class mapping if provided
        merged_class = class_mapping.get(fruit_class, fruit_class) if class_mapping else fruit_class
        logging.info(f"Processing class: {fruit_class} as {merged_class}")

        for img_name in os.listdir(class_path):
            img_path = os.path.join(class_path, img_name)
            img = cv2.imread(img_path)
            if img is None:
                logging.warning(f"Skipping {img_name} due to read error.")
                continue

            img = cv2.resize(img, (100, 100))

            # Color histogram
            hist = cv2.calcHist([img], [0, 1, 2], None, [8, 8, 8], [0, 256, 0, 256, 0, 256])
            hist = cv2.normalize(hist, hist).flatten()

            # Grayscale + LBP
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            lbp = local_binary_pattern(gray, P=24, R=3, method='uniform')
            lbp_hist, _ = np.histogram(lbp.ravel(), bins=np.arange(0, 27), range=(0, 26))
            lbp_hist = lbp_hist.astype("float") / lbp_hist.sum()

            # Hu Moments
            moments = cv2.moments(gray)
            hu_moments = cv2.HuMoments(moments).flatten()
            hu_moments = -np.sign(hu_moments) * np.log10(np.abs(hu_moments) + 1e-10)

            feature_vector = np.hstack([hist, lbp_hist, hu_moments])

            features.append(feature_vector)
            labels.append(merged_class)

            processed_images += 1
            if processed_images % 50 == 0:
                logging.info(f"Processed {processed_images}/{total_images} images... ({(processed_images/total_images)*100:.2f}%)")

    df = pd.DataFrame(features)
    df['label'] = labels
    df.to_csv(output_csv, index=False)
    logging.info(f"Feature extraction complete. Saved to {output_csv}")

if __name__ == "__main__":
    class_mapping = {
        "Cabbagered": "Cabbage", "Cabbagewhite": "Cabbage",
        "AppleBraeburn": "Apple", "AppleCore": "Apple", "AppleCrimsonSnow": "Apple",
        "AppleGolden": "Apple", "AppleGrannySmith": "Apple", "ApplePinkLady": "Apple",
        "AppleRed": "Apple", "AppleRedDelicious": "Apple", "AppleRedYellow": "Apple",
        "AppleRotten": "Apple", "Applehit": "Apple", "Appleworm": "Apple",
        "Avocadoripe": "Avocado",
        "BananaLadyFinger": "Banana", "BananaRed": "Banana",
        "Blackberriehalfrippen": "Blackberry", "Blackberrienotrippen": "Blackberry",
        "CherryRainier": "Cherry", "CherryWaxBlack": "Cherry", "CherryWaxRed": "Cherry",
        "CherryWaxYellow": "Cherry", "CherryWaxnotrippen": "Cherry"
    }

    extract_features(
        data_dir="fruits-360/Training",
        output_csv="train_features.csv",
        log_file="extract_train_features.log",
        class_mapping=class_mapping
    )

    extract_features(
        data_dir="fruits-360/Test",
        output_csv="test_features.csv",
        log_file="extract_test_features.log",
        class_mapping=class_mapping
    )
